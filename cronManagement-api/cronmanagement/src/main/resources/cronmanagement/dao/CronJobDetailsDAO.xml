<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cronmanagement.dao.CronJobDetailsDAO">
	<select id="getCronJobDetails" resultType="cronmanagement.bean.CronJob">
		SELECT id as cronId,
		serverId as serverId,
		comment as cronComment,
		status as cronStatus,
		name
		as cronName,
		scheduleexpr as cronExpression,
		cronType as cronType,
		noOfRuns as noOfRuns,
		threshold as threshold,
		noOfAlerts as noOfAlerts
		FROM
		cronjob where
		<if test="!requestDetails.listOfCriteriaSet.empty">
			<foreach item="filterSet" index="index"
				collection="requestDetails.listOfCriteriaSet" separator="AND">
				<foreach item="criteria" index="index" collection="filterSet"
					open="(" close=")" separator="OR">
					${criteria.key} ${criteria.operator}
					${criteria.value}
				</foreach>
			</foreach>
			and
		</if>
		status not like 'deleted'
		<if test="requestDetails.columOrders != null">
			ORDER BY
			<foreach item="columOrder" index="index" collection="requestDetails.columOrders"
				separator=",">
				${columOrder.columName} ${columOrder.sortOrder}
			</foreach>

		</if>
		<if test="requestDetails.columOrders == null">
			order by cronId
		</if>

	</select>

	<select id="getCronJobDetailsByServerId" resultType="cronmanagement.bean.CronJob">
		SELECT id as
		cronId,
		serverId as serverId,
		comment as cronComment,
		status as
		cronStatus,
		name as cronName,
		scheduleexpr as cronExpression,
		cronType as
		cronType,noOfRuns as noOfRuns,
		threshold as threshold,
		noOfAlerts as
		noOfAlerts
		FROM cronjob where serverId = #{serverId} and
		status not like
		'deleted'
	</select>

	<select id="getCronJobDetailsByCronId" resultType="cronmanagement.bean.CronJob">
		SELECT id as
		cronId,
		serverId as serverId,
		comment as cronComment,
		status as
		cronStatus,
		name as cronName,
		scheduleexpr as cronExpression,
		cronType as
		cronType,noOfRuns as noOfRuns,
		threshold as threshold,
		noOfAlerts as
		noOfAlerts
		FROM cronjob where id = #{cronId} and status not like
		'deleted'
	</select>

	<insert id="saveAllCronJobs">
		INSERT INTO
		cronjob(serverId,comment,status,name,scheduleexpr,cronType,noOfRuns,
		threshold,
		noOfAlerts)
		VALUES (
		<foreach item="cronJob" index="index" collection="cronJobs"
			open="" close="" separator="),(">
			#{cronJob.serverId},
			#{cronJob.cronComment}, #{cronJob.cronStatus},#{cronJob.cronName},
			#{cronJob.cronExpression}, #{cronJob.cronType},0,0,0
		</foreach>
		)
	</insert>

	<update id="updateAllCronJobs">
		UPDATE cronjob
		set comment=#{cronJob.cronComment},
		status=#{cronJob.cronStatus},name=#{cronJob.cronName}
		WHERE id
		=
		#{cronJob.cronId}
	</update>

	<update id="deleteCronJobs">
		UPDATE cronjob
		set status='deleted' where id In(
		<foreach item="id" index="index" collection="cronIds" open=""
			close="" separator=",">#{id}</foreach>
		)
	</update>

	<select id="getCronJobDetailsByCronType" resultType="cronmanagement.bean.CronJob">
		SELECT id as
		cronId,
		serverId as serverId,
		comment as cronComment,
		status as
		cronStatus,
		name as cronName,
		scheduleexpr as cronExpression,
		cronType as
		cronType,noOfRuns as noOfRuns,
		threshold as threshold,
		noOfAlerts as
		noOfAlerts
		FROM cronjob where cronType like #{cronType} and
		status not
		like 'deleted'
	</select>

	<select id="getCronJobByServerIdAndCronName" resultType="cronmanagement.bean.CronJob">
		SELECT
		id as cronId,
		serverId as serverId,
		comment as cronComment,
		status as
		cronStatus,
		name as cronName,
		scheduleexpr as cronExpression,
		cronType as
		cronType,noOfRuns as noOfRuns,
		threshold as threshold,
		noOfAlerts as
		noOfAlerts
		FROM cronjob where serverId = #{serverId} and name like
		#{cronName} and status not like 'deleted'
	</select>

	<update id="updateCronAlertCountDetails">
		UPDATE cronjob
			SET noOfAlerts =
			  (SELECT count(*)
			   FROM cron_alert ca
			   WHERE cronjob.id=ca.cron_id
			   GROUP BY ca.cron_id)
	</update>
	
	<update id="updateCronLogCountDetails">
		UPDATE cronjob
		SET noOfRuns =
 		 (SELECT count(*)
   			FROM cron_log_history clh
   				WHERE cronjob.id=clh.cron_id
   					GROUP BY clh.cron_id)
	</update>
	
	<update id="updateThresholdDetails">
		UPDATE cronjob
		SET threshold =
 		 (SELECT Round(avg(threshold))
  			 FROM cron_log_history clh
  			 WHERE cronjob.id=clh.cron_id
  			 GROUP BY clh.cron_id)
	</update>

</mapper>