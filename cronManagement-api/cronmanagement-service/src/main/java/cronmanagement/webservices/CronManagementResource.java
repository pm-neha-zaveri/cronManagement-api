package cronmanagement.webservices;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.apache.cxf.phase.PhaseInterceptorChain;

import com.pubmatic.apiutils.exception.ServiceException;
import com.pubmatic.apiutils.exception.DataValidationException;
import com.pubmatic.common.constant.ServiceConstants;
import cronmanagement.services.CronDetailsService;
import  cronmanagement.bean.*;

@Component
@Path("/cronmanagement/")
public class CronManagementResource {
     
/*  To Do - Auto generated code by archetype.
     Core business service autowring
     - if @Path value is a combination of words; please make it camel case; autogenerated code does not do it.
*/

    @Autowired
    CronDetailsService changeTheServiceName;
    
    @POST
    @Consumes("application/json")
    @Produces("application/json")
    public CronManagement post(CronManagement changeName) throws ServiceException, DataValidationException {
        return null;
    }
  
 	
    @PUT
    @Consumes("application/json")
    @Produces("application/json")
    @Path("/{id}")
    public CronManagement put(CronManagement changeName) throws ServiceException, DataValidationException {
        return null;
    }
    @GET
    @Produces("application/json")
    @Path("/{id}")
    public CronManagement get(@PathParam("id") Long id) throws ServiceException, DataValidationException {
        Long userId = (Long) PhaseInterceptorChain.getCurrentMessage().getExchange().get(ServiceConstants.USER_ID);
        return changeTheServiceName.get(userId,id);
    }
   
    /*
    @GET
    @Produces("application/json")
    public PageSupporter<CronManagement> search(@QueryParam("") ReportingRequest reportingRequest) throws ServiceException, DataValidationException {
    }
    */
}
